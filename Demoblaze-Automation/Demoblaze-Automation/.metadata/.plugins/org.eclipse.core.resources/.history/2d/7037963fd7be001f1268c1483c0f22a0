package tests;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.Assert;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import pages.LoginPage;

public class LoginPageTest {

    private WebDriver driver;
    private LoginPage loginPage;

    @BeforeMethod
    public void setUp() {
        System.setProperty("webdriver.chrome.driver", "path/to/chromedriver"); // Replace with your ChromeDriver path
        driver = new ChromeDriver();
        driver.get("https://www.demoblaze.com/");
        loginPage = new LoginPage(driver);
    }

    @AfterMethod
    public void tearDown() {
        if (driver != null) {
            driver.quit();
        }
    }

    @Test(dataProvider = "validLoginData")
    public void testSuccessfulLogin(String username, String password) {
        loginPage.navigateToLoginModal();
        loginPage.enterUsername(username);
        loginPage.enterPassword(password);
        loginPage.clickLoginButton();
        Assert.assertTrue(loginPage.isWelcomeMessageVisible(), "Welcome message should be visible after successful login.");
        Assert.assertTrue(loginPage.getWelcomeMessage().contains(username), "Welcome message should contain the username.");
    }

    @Test(dataProvider = "invalidLoginData")
    public void testLoginWithInvalidUsername(String username, String password) {
        loginPage.navigateToLoginModal();
        loginPage.enterUsername(username);
        loginPage.enterPassword(password);
        loginPage.clickLoginButton();
        Assert.assertTrue(loginPage.isConfirmationMessagePresent(), "Confirmation message should be present for invalid login.");
        String confirmationMessage = loginPage.getConfirmationMessage();
        Assert.assertTrue(confirmationMessage.contains("User does not exist."), "Incorrect error message for invalid credentials."); // Adjust if needed
    }
    
    @Test(dataProvider = "invalidLoginData")
    public void testLoginWithInvalidPassword(String username, String password) {
        loginPage.navigateToLoginModal();
        loginPage.enterUsername(username);
        loginPage.enterPassword(password);
        loginPage.clickLoginButton();
        Assert.assertTrue(loginPage.isConfirmationMessagePresent(), "Confirmation message should be present for invalid login.");
        String confirmationMessage = loginPage.getConfirmationMessage();
        Assert.assertTrue(confirmationMessage.contains("Wrong password."), "Incorrect error message for invalid credentials."); // Adjust if needed
    }

    @Test
    public void testLoginWithEmptyCredentials() {
        loginPage.navigateToLoginModal();
        loginPage.clickLoginButton();
        Assert.assertTrue(loginPage.isConfirmationMessagePresent(), "Confirmation message should be present for empty credentials.");
        String confirmationMessage = loginPage.getConfirmationMessage();
        Assert.assertTrue(confirmationMessage.contains("Please fill out Username and Password."), "Incorrect error message for empty credentials."); // Adjust if needed
    }

    @Test
    public void testLoginWithEmptyUsername() {
        loginPage.navigateToLoginModal();
        loginPage.enterPassword("password123");
        loginPage.clickLoginButton();
        Assert.assertTrue(loginPage.isConfirmationMessagePresent(), "Confirmation message should be present for empty username.");
        String confirmationMessage = loginPage.getConfirmationMessage();
        Assert.assertTrue(confirmationMessage.contains("Please fill out Username and Password."), "Incorrect error message for empty username."); // Adjust if needed
    }

    @Test
    public void testLoginWithEmptyPassword() {
        loginPage.navigateToLoginModal();
        loginPage.enterUsername("testuser");
        loginPage.clickLoginButton();
        Assert.assertTrue(loginPage.isConfirmationMessagePresent(), "Confirmation message should be present for empty password.");
        String confirmationMessage = loginPage.getConfirmationMessage();
        Assert.assertTrue(confirmationMessage.contains("Please fill out Username and Password."), "Incorrect error message for empty password."); // Adjust if needed
    }
    
    

    @DataProvider(name = "validLoginData")
    public Object[][] validLoginData() {
        return new Object[][]{
                {"testuser181", "1234"},
                {"testuser25177", "1234"}
        };
    }

    @DataProvider(name = "invalidLoginData")
    public Object[][] invalidLoginData() {
        return new Object[][]{
                {"testuser251777", "1234"},
                {"testuser181", "1233"},
                {"", ""},
                {"", "abcd"},
                {"testuser1", ""}
        };
    }
}