//package pages;
//
//import org.openqa.selenium.By;
//import org.openqa.selenium.JavascriptExecutor;
//import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.WebElement;
//import org.openqa.selenium.interactions.Actions;
//import org.openqa.selenium.support.ui.ExpectedConditions;
//import org.openqa.selenium.support.ui.WebDriverWait;
//
//import java.time.Duration;
//import java.util.List;
//
//public class ResponsiveDesign {
//
//    WebDriver driver;
//    WebDriverWait wait;
//    Actions actions;
//
//    public ResponsiveDesign(WebDriver driver) {
//    	this.driver = driver;
//        this.wait = new WebDriverWait(driver, Duration.ofSeconds(10));
//        this.actions = new Actions(driver);
//	}
//
//	public void openWebsite(String url) {
//        driver.get(url);
//    }
//
//    public void verifyMobileLayout() {
//        WebElement gridElement = driver.findElement(By.className("grid-container")); // Replace with actual class name
//        assert gridElement.isDisplayed();
//    }
//
//    public void verifyNavigationMenu() {
//        // Implement logic to interact with the navigation menu on mobile
//        // Example: Open the mobile menu, click on menu items, verify navigation
//        WebElement menuToggle = driver.findElement(By.id("mobile-menu-toggle")); // Replace with actual ID
//        menuToggle.click();
//        // Add assertions to verify menu items are visible and clickable
//    }
//
//    public void verifyInteractiveElements() {
//        // Implement logic to interact with buttons, forms, and links
//        // Example: Click on a button, fill out a form, click on a link
//        WebElement button = driver.findElement(By.cssSelector("button[type='submit']")); // Replace with actual selector
//        button.click();
//        // Add assertions to verify expected behavior after interaction
//    }
//
//    public void verifyNoContentOverflow() {
//        // Implement logic to check for horizontal scrolling on mobile
//        // Example: Get the body width and compare it to the viewport width
//        int bodyWidth = ((Long) ((JavascriptExecutor) driver).executeScript("return document.body.scrollWidth")).intValue();
//        int viewportWidth = driver.manage().window().getSize().getWidth();
//        assert bodyWidth <= viewportWidth : "Content overflows viewport width";
//    }
//
//    public void verifyClickableElementsSpacing() {
//        // Implement logic to check spacing between clickable elements
//        // Example: Get the bounding boxes of elements and check for overlaps
//        List<WebElement> clickableElements = driver.findElements(By.cssSelector("button, a, input[type='submit']"));
//        // Add logic to calculate and compare bounding boxes for overlap detection
//    }
//
//    public void verifyJavascriptFunctionality() {
//        // Implement logic to test JavaScript functions like form validation
//        // Example: Trigger form submission and check for validation messages
//        WebElement formInput = driver.findElement(By.id("form-input")); // Replace with actual ID
//        formInput.sendKeys("Invalid Input");
//        WebElement submitButton = driver.findElement(By.cssSelector("button[type='submit']"));
//        submitButton.click();
//        WebElement validationMessage = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("validation-message"))); // Replace with actual ID
//        assert validationMessage.isDisplayed();
//    }
//
//    // Add methods for remaining test cases (7-10) similarly...
//}
package pages;
import org.openqa.selenium.*;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.time.Duration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ResponsiveDesign {

    WebDriver driver;
    WebDriverWait wait;
    Actions actions;

    public ResponsiveDesign(WebDriver driver) {
        this.driver = driver;
        this.wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        this.actions = new Actions(driver);
    }

    public void openWebsite(String url) {
        driver.get(url);
    }

    public void verifyMobileLayout() {
        // Assuming the website uses a different layout structure for mobile
        WebElement mobileElement = driver.findElement(By.id("narvbarx")); // Replace with actual mobile element ID
        assert mobileElement.isDisplayed() : "Mobile layout not detected";
    }

    public void verifyNavigationMenu() {
        WebElement menuToggle = driver.findElement(By.id("navbar-toggler")); // Replace with actual menu toggle ID
        menuToggle.click();

        List<WebElement> menuItems = driver.findElements(By.cssSelector("#navbarSupportedContent a"));
        for (WebElement menuItem : menuItems) {
            assert menuItem.isDisplayed() : "Menu item not visible: " + menuItem.getText();
            assert menuItem.isEnabled() : "Menu item not clickable: " + menuItem.getText();
        }
    }

    public void verifyInteractiveElements() {
        // Example: Clicking the "Contact" button in the header
        WebElement contactButton = driver.findElement(By.linkText("Contact"));
        contactButton.click();

        // Assertion to check if contact modal is displayed
        WebElement contactModal = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("exampleModal")));
        assert contactModal.isDisplayed() : "Contact modal not displayed";
    }

    public void verifyNoContentOverflow() {
        int bodyWidth = ((Long) ((JavascriptExecutor) driver).executeScript("return document.body.scrollWidth")).intValue();
        int viewportWidth = driver.manage().window().getSize().getWidth();
        assert bodyWidth <= viewportWidth : "Content overflows viewport width";
    }

    public void verifyClickableElementsSpacing() {
        List<WebElement> clickableElements = driver.findElements(By.cssSelector("button, a, input[type='submit']"));

        for (int i = 0; i < clickableElements.size() - 1; i++) {
            WebElement element1 = clickableElements.get(i);
            WebElement element2 = clickableElements.get(i + 1);

            int element1Bottom = element1.getLocation().getY() + element1.getSize().getHeight();
            int element2Top = element2.getLocation().getY();

            assert element2Top >= element1Bottom : "Clickable elements overlap";
        }
    }

    public void verifyJavascriptFunctionality() {
        // Example: Testing the contact form validation
        WebElement contactButton = driver.findElement(By.linkText("Contact"));
        contactButton.click();

        WebElement contactEmailInput = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("recipient-email")));
        contactEmailInput.sendKeys("test");

        WebElement sendMessageButton = driver.findElement(By.xpath("//button[text()='Send message']"));
        sendMessageButton.click();

        WebElement errorMessage = wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(".invalid-feedback")));
        assert errorMessage.isDisplayed() : "Error message not displayed for invalid email";
    }

    public void testOnSmallScreenDevice() {
        // Assuming the website has specific breakpoints for smaller screens
        WebElement smallScreenElement = driver.findElement(By.className("small-screen-only")); // Replace with actual class name
        assert smallScreenElement.isDisplayed() : "Small screen element not displayed";
    }

    public void testDifferentScreenOrientations() {
        // Switch to landscape mode
        ((JavascriptExecutor) driver).executeScript("window.screen.orientation.lock('landscape-primary')");

        // Perform assertions for landscape mode
        // ...

        // Switch back to portrait mode
        ((JavascriptExecutor) driver).executeScript("window.screen.orientation.lock('portrait-primary')");

        // Perform assertions for portrait mode
        // ...
    }

    public void verifyNoContentCutOffPortrait() {
        // Capture a screenshot in portrait mode
        Screenshot screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);

        // Analyze the screenshot to check for content cut-off at the edges
        // This will require image processing libraries and logic to detect cut-off content
        // ...
    }

    public void verifyClickableElementsReach() {
        // Assuming a maximum tappable area size on small screens
        int maxTappableWidth = 100;
        int maxTappableHeight = 100;

        List<WebElement> clickableElements = driver.findElements(By.cssSelector("button, a, input[type='submit']"));

        for (WebElement element : clickableElements) {
            int elementWidth = element.getSize().getWidth();
            int elementHeight = element.getSize().getHeight();

            assert elementWidth <= maxTappableWidth && elementHeight <= maxTappableHeight :
                    "Element exceeds maximum tappable area: " + element.getText();
        }
    }
}