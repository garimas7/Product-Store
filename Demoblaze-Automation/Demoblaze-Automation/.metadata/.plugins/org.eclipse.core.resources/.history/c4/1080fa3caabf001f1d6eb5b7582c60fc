package tests;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.Assert;
import org.testng.annotations.*;

public class ErrorHandlingTest {
    private WebDriver driver;
    private ErrorHandling errorHandling;

    @BeforeClass
    public void setUp() {
        driver = new ChromeDriver();
        driver.manage().window().maximize();
        errorHandling = new ErrorHandling(driver);
        driver.get("https://www.demoblaze.com/");
    }

    @Test(priority = 1)
    public void testNonExistentPage() {
        Assert.assertTrue(errorHandling.checkNonExistentPage(), 
            "404 error page should be displayed for non-existent URL");
    }

    @Test(priority = 2)
    public void testLoggedInUserForm() {
        Assert.assertTrue(errorHandling.verifyLoggedInUserForm(), 
            "Form should contain valid email and name for logged-in user");
    }

    @Test(priority = 3)
    public void testInvalidContactForm() {
        errorHandling.submitInvalidContactForm();
        String alertText = errorHandling.getAlertText();
        Assert.assertTrue(alertText.contains("Invalid") || alertText.contains("error"), 
            "Alert should indicate invalid input");
    }

    @Test(priority = 4)
    public void testEmptyLoginFields() {
        errorHandling.loginWithEmptyFields();
        String alertText = errorHandling.getAlertText();
        Assert.assertTrue(alertText.contains("Please fill") || alertText.contains("empty"), 
            "Alert should indicate empty fields");
    }

    @Test(priority = 5)
    public void testCheckoutWithoutDetails() {
        errorHandling.proceedToCheckoutWithoutDetails();
        String alertText = errorHandling.getAlertText();
        Assert.assertTrue(alertText.contains("Please fill") || alertText.contains("required"), 
            "Alert should indicate missing required details");
    }

    @Test(priority = 6)
    public void testMaxInputLength() {
        errorHandling.fillFormWithMaxInput();
        String alertText = errorHandling.getAlertText();
        Assert.assertTrue(alertText.contains("exceeded") || alertText.contains("too long"), 
            "Alert should indicate maximum length exceeded");
    }

    @Test(priority = 7)
    public void testMinInputLength() {
        errorHandling.fillFormWithMinInput();
        String alertText = errorHandling.getAlertText();
        Assert.assertTrue(alertText.contains("required") || alertText.contains("too short"), 
            "Alert should indicate minimum length requirement");
    }

    @AfterClass
    public void tearDown() {
        if (driver != null) {
            driver.quit();
        }
    }
}
