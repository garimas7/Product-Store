package tests;

//import data.SignUpData;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.Assert;
import org.testng.annotations.*;
import pages.SignUpPage;

public class SignUpPageTest {

    private WebDriver driver;
    private SignUpPage signUpPage;

    @BeforeMethod
    public void setUp() {
        driver = new ChromeDriver();
        driver.get("https://www.demoblaze.com/");
        signUpPage = new SignUpPage(driver);
    }

    @AfterMethod
    public void tearDown() {
        if (driver != null) {
            driver.quit();
        }
    }

    @Test(dataProvider = "validSignUpData")
    public void testSuccessfulSignUp(String username, String password) {
        signUpPage.navigateToSignUpModal();
        signUpPage.enterUsername(username);
        signUpPage.enterPassword(password);
        signUpPage.clickSignUpButton();
        Assert.assertTrue(signUpPage.isConfirmationMessagePresent(), "Confirmation message should be present.");
        String confirmationMessage = signUpPage.getConfirmationMessage();
        Assert.assertTrue(confirmationMessage.contains("Sign up successful."), "Confirmation message is incorrect.");
    }

    @Test(dataProvider = "duplicateUsernameData")
    public void testSignUpWithExistingUsername(String username, String password) {
        signUpPage.navigateToSignUpModal();
        signUpPage.enterUsername(username);
        signUpPage.enterPassword(password);
        signUpPage.clickSignUpButton();
        Assert.assertTrue(signUpPage.isConfirmationMessagePresent(), "Confirmation message should be present.");
        String confirmationMessage = signUpPage.getConfirmationMessage();
        Assert.assertTrue(confirmationMessage.contains("This user already exist."), "Incorrect error message for existing username.");
    }

    @Test(dataProvider = "shortPasswordData")
    public void testSignUpWithShortPassword(String username, String password) {
        signUpPage.navigateToSignUpModal();
        signUpPage.enterUsername(username);
        signUpPage.enterPassword(password);
        signUpPage.clickSignUpButton();
        Assert.assertTrue(signUpPage.isConfirmationMessagePresent(), "Confirmation message should be present.");
        String confirmationMessage = signUpPage.getConfirmationMessage();
        Assert.assertTrue(confirmationMessage.contains("Password is too short"), "Incorrect error message for short password.");
    }

    @Test
    public void testSignUpWithEmptyCredentials() {
        signUpPage.navigateToSignUpModal();
        signUpPage.clickSignUpButton();
        Assert.assertTrue(signUpPage.isConfirmationMessagePresent(), "Confirmation message should be present.");
        String confirmationMessage = signUpPage.getConfirmationMessage();
        Assert.assertTrue(confirmationMessage.contains("Please fill out Username and Password."), "Incorrect error message for empty credentials.");
    }

    @Test(dataProvider = "minLengthData")
    public void testSignUpWithMinLengthCredentials(String username, String password) {
        signUpPage.navigateToSignUpModal();
        signUpPage.enterUsername(username);
        signUpPage.enterPassword(password);
        signUpPage.clickSignUpButton();
        Assert.assertTrue(signUpPage.isConfirmationMessagePresent(), "Confirmation message should be present.");
        String confirmationMessage = signUpPage.getConfirmationMessage();
        Assert.assertTrue(confirmationMessage.contains("Username and Password is too short."), "Confirmation message is incorrect for min length.");
    }

    @Test(dataProvider = "maxLengthData")
    public void testSignUpWithMaxLengthCredentials(String username, String password) {
        signUpPage.navigateToSignUpModal();
        signUpPage.enterUsername(username);
        signUpPage.enterPassword(password);
        signUpPage.clickSignUpButton();
        Assert.assertTrue(signUpPage.isConfirmationMessagePresent(), "Confirmation message should be present.");
        String confirmationMessage = signUpPage.getConfirmationMessage();
        Assert.assertTrue(confirmationMessage.contains("Username and Password is too short."), "Incorrect error message for max length.");
    }

    @DataProvider(name = "validSignUpData")
    public Object[][] validSignUpData() {
        return new Object[][]{
                {"testuser111", "1234"},
                {"testuser112", "1234"}
        };
    }

    @DataProvider(name = "duplicateUsernameData")
    public Object[][] duplicateUsernameData() {
        return new Object[][]{
                {"testuser1", "1234"},
                {"testuser181", "1234"}
        };
    }

    @DataProvider(name = "shortPasswordData")
    public Object[][] shortPasswordData() {
        return new Object[][]{
                {"testuser113", "1"},
                {"testuser114", "12"}
        };
    }

    @DataProvider(name = "minLengthData")
    public Object[][] minLengthData() {
        return new Object[][]{
                {"@b@", "@b@"},
                {"@c@", "@c@"}
        };
    }

    @DataProvider(name = "maxLengthData")
    public Object[][] maxLengthData() {
        return new Object[][]{
                {"qwertyuiopasdfghjklzxcvbnm@181", "qwertyuiopasdfghjklzxcvbnm@181"},
                {"qwertyuiopasdfghjklzxcvbnm@181qwertyuiopasdfghjklzxcvbnm@181", "qwertyuiopasdfghjklzxcvbnm@181qwertyuiopasdfghjklzxcvbnm@181"}
        };
    }
}